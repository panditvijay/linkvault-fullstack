events {}

http {
    server {
        listen 80; # Listen on the standard HTTP port

        # The location of our internal authentication service
        location = /_validate_auth {
            internal; # This location can only be reached by other nginx locations
            proxy_pass http://auth_validator:8080/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization; # Pass the token
        }

        # Function to add CORS headers
        # This will run for any location that has a proxy_pass
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

        

        # Rule 1: If the request path starts with /api/users/, send it to the UserService
        location /api/users/ {
            
            proxy_pass http://user_service:8000/api/; # The service name from docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        }

        # Rule 2: If the request path starts with /api/bookmarks/, send it to the BookmarkService
        location /api/bookmarks/ {
            auth_request /_validate_auth;
            # Copy the X-User-Id header from the auth service's response
            auth_request_set $auth_user_id $upstream_http_x_user_id;
            proxy_set_header X-User-Id $auth_user_id;
            proxy_pass http://bookmark_service:8001/api/bookmarks/; # The service name from docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        }

        # A default location to check if Nginx is running
        location / {
            return 404 '{"error": "API route not found"}';
        }
    }
}